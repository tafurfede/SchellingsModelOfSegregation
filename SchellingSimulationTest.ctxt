#BlueJ class context
comment0.target=SchellingSimulationTest
comment0.text=\n\ \ //\ Virginia\ Tech\ Honor\ Code\ Pledge\:\n\ \ //\n\ \ //\ As\ a\ Hokie,\ I\ will\ conduct\ myself\ with\ honor\ and\ integrity\ at\ all\ times.\n\ \ //\ I\ will\ not\ lie,\ cheat,\ or\ steal,\ nor\ will\ I\ accept\ the\ actions\ of\ those\n\ \ //\ who\ do.\n\ \ //\ --\ Federico\ Tafur\ (fedetafur)\n\ \ \n\ \ in\ this\ i\ will\ test\ all\ my\ methods,\ giving\ assertions\ to\ find\ out\ if\ all\ \n\ \ code\ ends\ up\ working\ as\ expected\n\ \ Summarize\ what\ your\ test\ objectives\ are.\n\n\ \ @author\ Federico\ Tafur\ (fedetafur)\n\ \ @version\ (2024.10.03)\n
comment1.params=
comment1.target=SchellingSimulationTest()
comment1.text=\n\ Creates\ a\ new\ SchellingSimulationTest\ test\ object.\n
comment10.params=
comment10.target=void\ testIsEmpty()
comment10.text=\n\ Takes\ one\ Pixel\ object\ and\ returns\ true\ if\ its\ color\ is\ \n\ Color.WHITE,\ representing\ an\ empty\ location.\n
comment11.params=
comment11.target=void\ testIsSatisfied()
comment11.text=\n\ this\ method\ test\ isSatisfied()\ method,\ while\ following\ this\ \n\ description...\ Takes\ one\ Pixel\ object\ and\ a\ Color\ value,\ \n\ and\ returns\ a\ boolean\ result\ indicating\ whether\ an\ agent\ \n\ of\ the\ specified\ Color\ would\ be\ satisfied\ at\ the\ given\ \n\ Pixel\ location.\ It\ should\ return\ true\ if\ there\ are\ no\ \n\ neighboring\ agents,\ or\ if\ the\ proportion\ of\ neighboring\ \n\ agents\ the\ same\ color\ as\ the\ parameter\ meets\ or\ exceeds\ \n\ the\ satisfaction\ threshold.\ Remember\ not\ to\ count\ empty\ \n\ neighboring\ pixels,\ only\ neighboring\ agents.\n
comment12.params=
comment12.target=void\ testMaybeRelocate()
comment12.text=\n\ this\ method\ test\ maybeRelocate()\ method,\ while\ following\ this\ \n\ description...\ Takes\ one\ Pixel\ object\ as\ a\ parameter\ and\ returns\ \n\ a\ boolean\ result.\ This\ method\ tries\ to\ move\ the\ corresponding\ \n\ agent\ to\ a\ new\ pixel\ location.\ This\ involves\ picking\ a\ new\ random\ \n\ x/y\ location\ in\ the\ image\ (below\ the\ redline,\ if\ the\ current\ pixel\ \n\ is\ occupied\ by\ an\ orange\ agent).\ If\ the\ selected\ location\ is\ empty,\ \n\ and\ if\ the\ current\ agent\ would\ be\ satisfied\ at\ the\ new\ location,\ \n\ then\ "move"\ the\ agent\ by\ setting\ the\ new\ location's\ color\ to\ the\ \n\ current\ pixel's\ color\ and\ setting\ the\ current\ pixel's\ color\ to\ \n\ Color.WHITE.\ Otherwise,\ leave\ the\ current\ agent\ in\ place,\ if\ it\ \n\ cannot\ be\ moved\ to\ the\ selected\ destination.\ Return\ \n\ true\ if\ the\ agent\ is\ moved,\ or\ false\ if\ the\ attempt\ to\ move\ fails.\n\ \n
comment13.params=
comment13.target=void\ testMaybeRelocate02()
comment13.text=\n\ test\ the\ method\ maybeReolcate(),\ more\ specifically\ \n\ the\ if\ statement\ with\ two\ conditions.\ \n
comment14.params=
comment14.target=void\ testCycleAgents()
comment14.text=\n\ this\ method\ cycleAgents()\ method,\ while\ following\ this\ \n\ description...\ Takes\ no\ parameters\ and\ returns\ an\ integer\ \n\ result.\ This\ method\ uses\ a\ loop\ over\ all\ pixels,\ checking\ \n\ each\ pixel\ in\ turn.\ If\ the\ pixel\ is\ empty,\ leave\ it\ alone.\ \n\ If\ it\ is\ occupied,\ check\ to\ see\ if\ the\ agent\ there\ is\ \n\ satisfied--if\ so,\ leave\ the\ agent\ alone.\ Otherwise,\ attempt\ \n\ to\ relocate\ it\ to\ a\ new\ position\ (which\ could\ succeed\ or\ fail,\ \n\ as\ described\ under\ maybeRelocate().\ The\ method\ returns\ the\ total\ \n\ number\ of\ successful\ moves\ after\ processing\ all\ pixels.\ \ \ \ \n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\n\ Sets\ up\ the\ test\ fixture.\n\ Called\ before\ every\ test\ case\ method.\n
comment3.params=
comment3.target=void\ testGetSatisfactionThreshold()
comment3.text=\n\ this\ method\ tests\ getSatisfactionThreshold()\ method\ \n\ while\ following\ this\ description...\ A\ getter\ method\ \n\ that\ returns\ the\ satisfaction\ threshold\ (a\ double).\n
comment4.params=
comment4.target=void\ testSetSatisfactionThreshold()
comment4.text=\n\ this\ method\ tests\ getSatisfactionThreshold()\ method\ \n\ while\ following\ this\ description...\ A\ getter\ method\ \n\ that\ returns\ the\ satisfaction\ threshold\ (a\ double).\n
comment5.params=
comment5.target=void\ testGetRedLine()
comment5.text=\n\ this\ method\ test\ getRedLine()\ method,\ while\ following\ this\ \n\ description...\ A\ getter\ method\ that\ returns\ the\ redline\ \n\ value\ (an\ int).\n
comment6.params=
comment6.target=void\ testSetRedLine()
comment6.text=\n\ this\ method\ test\ setRedLine()\ method,\ while\ following\ this\ \n\ description...\ A\ setter\ method\ that\ takes\ an\ integer\ \n\ parameter\ and\ changes\ the\ redline\ to\ the\ specified\ value.\n
comment7.params=
comment7.target=void\ testPopulate()
comment7.text=\n\ this\ method\ test\ populate()\ method,\ while\ following\ this\ \n\ description...\ Takes\ two\ double\ parameters\ between\ \n\ 0.0\ -\ 1.0\ that\ represent\ percentages.\ This\ method\ will\ \n\ "paint"\ the\ image\ with\ a\ randomized\ collection\ of\ blue\ \n\ and\ orange\ pixels.\ The\ first\ parameter\ represents\ the\ \n\ probabilty\ of\ any\ pixel\ in\ the\ image\ being\ set\ to\ blue\ \n\ (representing\ an\ X\ agent).\ The\ second\ represents\ the\ \n\ probability\ of\ any\ pixel\ in\ the\ image\ (below\ the\ redline)\ \n\ being\ set\ to\ orange\ (representing\ an\ O\ agent).\ Other\ \n\ pixels\ will\ be\ left\ alone\ (empty,\ represented\ by\ \ white\ ).\n
comment8.params=
comment8.target=void\ testPopulate02()
comment8.text=\n\ tests\ the\ populate\ method\ for\ the\ second\n\ time\n
comment9.params=
comment9.target=void\ testAreSameColor()
comment9.text=\n\ this\ method\ test\ areSameColor()\ method,\ while\ following\ this\ \n\ description...\ Takes\ two\ Pixel\ objects\ and\ returns\ a\ boolean\ \n\ value\ indicating\ whether\ the\ two\ pixels\ have\ the\ same\ color.\n
numComments=15
