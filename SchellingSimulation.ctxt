#BlueJ class context
comment0.target=SchellingSimulation
comment0.text=\n\ \ //\ Virginia\ Tech\ Honor\ Code\ Pledge\:\n\ \ //\n\ \ //\ As\ a\ Hokie,\ I\ will\ conduct\ myself\ with\ honor\ and\ integrity\ at\ all\ times.\n\ \ //\ I\ will\ not\ lie,\ cheat,\ or\ steal,\ nor\ will\ I\ accept\ the\ actions\ of\ those\n\ \ //\ who\ do.\n\ \ //\ --\ Federico\ Tafur\ (fedetafur)\n\ \ \n\ \ In\ this\ program\ we\ will\ be\ creating\ a\ shellingSimulation,\ in\ this\ section\n\ \ we\ will\ be\ writing\ all\ the\ methods\ with\ stubs,\ formating\ the\ coding\ for\ next\n\ \ project.\ \n\ \ Follow\ it\ with\ additional\ details\ about\ its\ purpose,\ what\ abstraction\n\ \ it\ represents,\ and\ how\ to\ use\ it.\n\n\ \ @author\ Federico\ Tafur\ (fedetafur)\n\ \ @version\ (2024.10.03)\n
comment1.params=width\ height
comment1.target=SchellingSimulation(int,\ int)
comment1.text=\n\ Initializes\ a\ newly\ created\ SchellingSimulation\ object.\n\ \n\ @param\ width\ ,\ in\ this\ parameter\ we\ will\ be\ determining\ \n\ the\ width\ of\ the\ picture\ using\ in\ the\ shellingSimulation\n\ \n\ @param\ height\ ,\ in\ this\ parameter\ we\ will\ be\ determining\ \n\ the\ height\ of\ the\ picture\ using\ in\ the\ shellingSimulation\n
comment10.params=pixel
comment10.target=boolean\ maybeRelocate(student.media.Pixel)
comment10.text=\n\ Takes\ one\ Pixel\ object\ as\ a\ parameter\ and\ returns\ a\ boolean\ result.\ \n\ This\ method\ tries\ to\ move\ the\ corresponding\ agent\ to\ a\ new\ pixel\ \n\ location.\ This\ involves\ picking\ a\ new\ random\ x/y\ location\ in\ the\ \n\ image\ (below\ the\ redline,\ if\ the\ current\ pixel\ is\ occupied\ by\ an\ \n\ orange\ agent).\ If\ the\ selected\ location\ is\ empty,\ and\ if\ the\ current\ \n\ agent\ would\ be\ satisfied\ at\ the\ new\ location,\ then\ "move"\ the\ agent\ by\ \n\ setting\ the\ new\ location's\ color\ to\ the\ current\ pixel's\ color\ and\ \n\ setting\ the\ current\ pixel's\ color\ to\ Color.WHITE.\ Otherwise,\ leave\ the\ \n\ current\ agent\ in\ place,\ if\ it\ cannot\ be\ moved\ to\ the\ selected\ \n\ destination.\ Return\ true\ if\ the\ agent\ is\ moved,\ or\ false\ if\ the\ attempt\n\ to\ move\ fails.\n\ \n\ @return\ boolean\ ,\ in\ this\ return\ we\ will\ know\ if\ the\ case\ ends\n\ \ up\ being\ true\ or\ false\ through\ boolean\ values\n\ \n\ @param\ pixel\ checks\ the\ pixel\ and\ it's\ qualities,\ and\ if\ nesearry\n\ to\ relacate\ to\ another\ space\ in\ the\ image.\n
comment11.params=
comment11.target=int\ cycleAgents()
comment11.text=\n\ Takes\ no\ parameters\ and\ returns\ an\ integer\ result.\ This\ \n\ method\ uses\ a\ loop\ over\ all\ pixels,\ checking\ each\ pixel\ in\ \n\ turn.\ If\ the\ pixel\ is\ empty,\ leave\ it\ alone.\ If\ it\ is\ occupied,\ \n\ check\ to\ see\ if\ the\ agent\ there\ is\ satisfied--if\ so,\ leave\ the\ \n\ agent\ alone.\ Otherwise,\ attempt\ to\ relocate\ it\ to\ a\ new\ position\ \n\ (which\ could\ succeed\ or\ fail,\ as\ described\ under\ maybeRelocate().\ \n\ The\ method\ returns\ the\ total\ number\ of\ successful\ moves\ after\ \n\ processing\ all\ pixels.\n\ \n\ @return\ (int)\ this\ return\ gives\ back\ the\ amonut\ of\ cycles\ done\ \n\ in\ the\ system.\n
comment2.params=
comment2.target=double\ getSatisfactionThreshold()
comment2.text=\n\ A\ getter\ method\ that\ returns\ the\ satisfaction\ threshold\ \n\ (a\ double).\n\ \n\ @return\ (double)\ that\ represents\ the\ satisfaction\ \n\ threshold\n
comment3.params=newThreshold
comment3.target=void\ setSatisfactionThreshold(double)
comment3.text=\n\ A\ setter\ method\ that\ takes\ a\ double\ parameter\ and\ changes\ \n\ the\ satisfaction\ threshold\ to\ the\ specified\ value.\n\ \n\ @param\ newThreshold\ (double)\ represents\ a\ number\ \n\ that\ will\ change\ the\ satisfaction\ threshold.\ \n
comment4.params=
comment4.target=int\ getRedLine()
comment4.text=\n\ A\ getter\ method\ that\ returns\ the\ redline\ value\ (an\ int).\n\ \n\ @return\ (int)\ that\ represents\ the\ integer\ that\ represents\n\ the\ standard\ for\ the\ RedLine.\ \n
comment5.params=changeRedLine
comment5.target=void\ setRedLine(int)
comment5.text=\n\ A\ setter\ method\ that\ takes\ an\ integer\ parameter\ and\ changes\ \n\ the\ redline\ to\ the\ specified\ value.\n\ \n\ @param\ changeRedLine\ represents\ the\ specified\ value\ for\ the\ RedLine\n
comment6.params=blue\ orange
comment6.target=void\ populate(double,\ double)
comment6.text=\n\ \ \ \ \ Takes\ two\ double\ parameters\ between\ 0.0\ -\ 1.0\ that\ represent\ \n\ \ \ \ \ percentages.\ This\ method\ will\ "paint"\ the\ image\ with\ a\ randomized\ \n\ \ \ \ \ collection\ of\ blue\ and\ orange\ pixels.\ The\ first\ parameter\ represents\ \n\ \ \ \ \ the\ probabilty\ of\ any\ pixel\ in\ the\ image\ being\ set\ to\ blue\ \n\ \ \ \ \ (representing\ an\ X\ agent).\ The\ second\ represents\ the\ probability\ \n\ \ \ \ \ of\ any\ pixel\ in\ the\ image\ (below\ the\ redline)\ being\ set\ to\ orange\ \n\ \ \ \ \ (representing\ an\ O\ agent).\ Other\ pixels\ will\ be\ left\ alone\ \n\ \ \ \ \ (empty,\ represented\ by\ white\ ).\n\ \ \ \ \ \n\ \ \ \ \ @param\ blue\ The\ first\ parameter\ represents\ the\ probabilty\ of\ \n\ \ \ \ \ any\ pixel\ in\ the\ image\ being\ set\ to\ blue\ (representing\ an\ X\ \n\ \ \ \ \ agent).\ \n\ \ \ \ \ \n\ \ \ \ \ @param\ orange\ The\ second\ represents\ the\ probability\ of\ any\ \n\ \ \ \ \ pixel\ in\ the\ image\ (below\ the\ redline)\ being\ set\ to\ orange\ \n\ \ \ \ \ (representing\ an\ O\ agent).\n
comment7.params=pixel1\ pixel2
comment7.target=boolean\ areSameColor(student.media.Pixel,\ student.media.Pixel)
comment7.text=\n\ Takes\ two\ Pixel\ objects\ and\ returns\ a\ boolean\ value\ indicating\ \n\ whether\ the\ two\ pixels\ have\ the\ same\ color.\n\ \n\ @return\ boolean\ ,\ in\ this\ return\ we\ will\ know\ if\ the\ case\ ends\n\ up\ being\ true\ or\ false\ through\ boolean\ values\n\ \n\ @param\ pixel1\ checks\ the\ color\ for\ the\ first\ pixel\n\ \n\ @param\ pixel2\ checks\ the\ color\ for\ the\ second\ pixel\n
comment8.params=pixel
comment8.target=boolean\ isEmpty(student.media.Pixel)
comment8.text=\n\ Takes\ one\ Pixel\ object\ and\ returns\ true\ if\ its\ color\ is\ Color.WHITE,\ \n\ representing\ an\ empty\ location.\n\ \n\ @return\ boolean\ ,\ in\ this\ return\ we\ will\ know\ if\ the\ case\ ends\n\ up\ being\ true\ or\ false\ through\ boolean\ values\n\ \n\ @param\ pixel\ checks\ the\ color\ for\ the\ first\ pixel,\ more\ specifically\n\ to\ check\ if\ the\ pixel\ is\ empty.\n
comment9.params=pixel\ agentColor
comment9.target=boolean\ isSatisfied(student.media.Pixel,\ java.awt.Color)
comment9.text=\n\ \ Takes\ one\ Pixel\ object\ and\ a\ Color\ value,\ and\ returns\ a\ \n\ \ boolean\ result\ indicating\ whether\ an\ agent\ of\ the\ specified\ \n\ \ Color\ would\ be\ satisfied\ at\ the\ given\ Pixel\ location.\ It\ \n\ \ should\ return\ true\ if\ there\ are\ no\ neighboring\ agents,\ or\ if\ \n\ \ the\ proportion\ of\ neighboring\ agents\ the\ same\ color\ as\ the\ \n\ \ parameter\ meets\ or\ exceeds\ the\ satisfaction\ threshold.\ Remember\ \n\ \ not\ to\ count\ empty\ neighboring\ pixels,\ only\ neighboring\ agents.\n\ \ \ \ \ \n\ \ @return\ boolean\ ,\ in\ this\ return\ we\ will\ know\ if\ the\ case\ ends\n\ \ up\ being\ true\ or\ false\ through\ boolean\ values\n\ \n\ \ @param\ pixel\ checks\ the\ pixel\ and\ it's\ qualities\n\ \ \n\ \ @param\ agentColor\ checks\ the\ color\ of\ the\ pixel,\ specially\n\ \ to\ see\ if\ it\ satifies\ it's\ requisites\n
numComments=12
